//https://www.hackerearth.com/practice/data-structures/trees/binary-search-tree/practice-problems/algorithm/monk-and-cursed-tree/


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.*;

class TestClass {
    
    static Node root;
    
    public static void main(String args[] ) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int loop = Integer.parseInt(br.readLine()); 
        int arr[]=new int[loop];
        String s[]=br.readLine().trim().split(" "); 
        for(int t=0;t<loop;t++){
            arr[t]=Integer.parseInt(s[t]);
            root=insert(arr[t],root);
        }
        String u[]=br.readLine().trim().split(" ");
        int x=Integer.parseInt(u[0]);
        int y=Integer.parseInt(u[1]);
        System.out.println(Arrays.toString(s));   
        
    }
  public static Node insert(int key,Node root){
      if(root==null){
          root=new Node(key);
          return root;
      }
      else if(key<root.data){
          root.left=insert(key,root.left);
      }
     else{
       root.right=insert(key,root.right);
      } 
   return root;    
  }  
  
  
class Node{
    Node left;
    Node right;
    int data;
    Node(int data){
        this.data=data;
    }
}    
}
